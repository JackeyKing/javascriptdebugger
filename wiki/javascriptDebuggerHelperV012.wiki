#summary 这算是帮助文档吗
#labels helper
= oDebugger能做什么 =
= 给函数下断点 =
*命令：*

  * bp <函数名> 给<函数名>下断点，当执行到这个函数时，会弹出对话框显示调用者及传达室入参数，并可以决定执行还是不执行这个函数。

  * bpx <函数名> 给<函数名>下断点，当执行到这个函数时，会先调用调试器，例如VC。

  * bl 列出给哪些函数设了断点。

  * bc <数字> 清除指定的断点。

= 显示鼠标位置 =
*命令：*
  * mousepos 开关显示鼠标位置。
= 显示输入的keycode =
*命令：*
  * keycode 开关显示keycode。
= 改变鼠标所处位置下的对象背景色 =
*快捷键：*
  * F8 改变鼠标所处位置下的对象背景色，再按一次恢复原色。
= 显示鼠标所处位置下的对象层次 =
*快捷键：*
  * F7 依次显示鼠标所处位置下的对象以及它的父对象。
= oDebugger还能做什么 =
= 直接执行当前页面中的javascript =
*命令：*
  * 任意的javascript代码 执行输入的任意的javascript代码。甚至可以拿它当个计算器来用，如输入 1 + 1 ，回车后就会显示结果。
= oDebugger还还能做什么 =
= 大量的内置函数 =
*命令：*
  * 内内置有大量的函数 直接可以以od.开头来调用这些内置函数。如转换10进制到16进制的函数 $toHex(args) 就可以直接用od.$toHex(args)来执行。具体有哪些函数，请看代码吧 ;=)
= oDebugger有哪些快捷键 =
= 显示或隐藏oDebugger =
*快捷键：*
  * F12 显示或隐藏oDebugger。
*快捷键：*
  * F8 改变鼠标所处位置下的对象背景色，再按一次恢复原色。
= 显示鼠标所处位置下的对象层次 =
*快捷键：*
  * F7 依次显示鼠标所处位置下的对象以及它的父对象。
= 恢复前几次输入的命令 =
*快捷键：*
  * Ctrl + 向上箭头 按住Ctrl不放，依次按向上箭头，会显示命令历史中以前输入的命令。
= 恢复后几次输入的命令 =
*快捷键：*
  * Ctrl + 向下箭头 按住Ctrl不放，依次按向下箭头，会显示命令历史中以后输入的命令。
= 保存当前输入的命令 =
*快捷键：*
  * 右Alt + 数字0-9 按住右Alt不放，按下数字键，会保存当前输入框中的命令。
= 恢复保存的命令 =
*快捷键：*
  * 左Alt + 数字0-9 按住左Alt不放，按下已经保存过的数字键，会把保存的命令放入输入框中。
= oDebugger有哪些快捷默认对象 =
= 存储动态生成的对象或变量 =
*默认变量名：*
  * od oDebugger在当前页面中的变量名。
*默认变量名：*
  * od._g_targetObj 鼠标所处位置下的对象。
*默认变量名：*
  * O[ ] 或 od.O[ ] 或 od._g_oDList[ ] 数组，可以存储动态生成的对象或变量。
*默认变量名：*
  * S(args) 或 od.S(args) 函数。可以把参数args输出到oDebugger的输出框中。
*默认变量名：*
  * M(args) 或 od.M(args) 函数。显示方法或变量args的属性。
*默认变量名：*
  * P(args) 或 od.P(args) 函数。显示变量的args值。
*默认变量名：*
  * V(args) 或 od.V(args) 函数。显示变量的args值。
*默认变量名：*
  * L(args) 或 od.L(args) 函数。列出对象args。
*默认变量名：*
  * $R() 或 od.$R() 函数。返回执行后的结果。
*默认变量名：*
  * $(args) 或 od.$(args) 函数。取得args指定的id所对应的对象。
*默认变量名：*
  * od.pBody 取得oDebugger所在的页面的BODY对象。
= 怎么动态装入oDebugger =
= 单文件页面 =
*代码：*
  * 在C盘下新建文件夹debugger，把debugger.js放到里面去。打开oDebugger文件debugger.js，在文件头部Dynamic load debugger节，会看到一些注释掉的代码，如果要执行oDebugger的页面是一个页面，就找到63行的代码，拷贝到剪切板（注意不要带前面的注释），粘贴到地址栏中，按下回车，不久就能看到 inject sucess字样的提示框，确定后就可以用了。
= frame框架页面 =
*代码：*
  * 在C盘下新建文件夹debugger，把debugger.js放到里面去。打开oDebugger文件debugger.js，在文件头部Dynamic load debugger节，会看到一些注释掉的代码，如果要执行oDebugger的页面是一个frame框架页面，并且主frame的名字为main，就找到62行的代码，拷贝到剪切板（注意不要带前面的注释），粘贴到地址栏中，按下回车，不久就能看到 inject sucess字样的提示框，确定后就可以用了。如果主frame的名字不是main就改一下64行吧（替换掉里面的main为真正的名字），也不难 ;=)
= 你能为oDebugger做什么 =
= 参与开发 =
*开发：*
  * oDebugger现在仅仅只有Version 0.42 这么大，还很不成熟。你可以参与它的开发。有好的建议请发邮件到：_Jackey.King ( AT ) gmail.com_联系我吧。欢迎寄送你更改的oDebugger过来。
= 起个名字 =
*名字：*
  * 很不幸，oDebugger还没有一个自己的名字，你可以给它起个好听的名字。有好的建议请发邮件到：_Jackey.King ( AT ) gmail.com_联系我吧。
= oDebugger的目标是什么 =
*目标*
  * oDebugger是为了调试js方便而出现的，它定位于方便的调试js，尤其是在那些用VC调试时，VC找不到源码的情况。还适用于：页面中的对象是从后台取得数据，用js动态创建的，这种情况下无论是保存源码还是用VC调试都不方便，一个一个的alert消息也很麻烦，所以就想到了用js来调试js。希望oDebugger以后也会定位于方便和快捷上。
= oDebugger有哪些限制 =
*限制*
  * oDebugger目前只能在IE系列的浏览器中使用 ;=( 因为需要，开发的时候就一直在IE6.0中测试的。已经知道肯定不支持firefox了，很大的遗憾，不过firefox中有firebug，一个很不错的工具 ;=)